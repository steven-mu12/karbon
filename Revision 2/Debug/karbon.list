
karbon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002260  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080023f4  080023f4  000123f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800240c  0800240c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002414  08002414  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002428  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002428  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008960  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001452  00000000  00000000  0002899c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00029df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159ce  00000000  00000000  0002ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ab0  00000000  00000000  00040556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c81b  00000000  00000000  00049006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c0c  00000000  00000000  000d5874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080023dc 	.word	0x080023dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080023dc 	.word	0x080023dc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);

int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

  /* INITIALIZATION */
  HAL_Init();
 80004dc:	f000 faa0 	bl	8000a20 <HAL_Init>
  SystemClock_Config();
 80004e0:	f000 f808 	bl	80004f4 <SystemClock_Config>
  MX_GPIO_Init();
 80004e4:	f000 f8ee 	bl	80006c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8c2 	bl	8000670 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004ec:	f000 f86e 	bl	80005cc <MX_ADC1_Init>

  /* LOOP */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x18>
	...

080004f4 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f001 ff62 	bl	80023cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <SystemClock_Config+0xd0>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a28      	ldr	r2, [pc, #160]	; (80005c4 <SystemClock_Config+0xd0>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <SystemClock_Config+0xd0>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <SystemClock_Config+0xd4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xd4>)
 8000542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xd4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000568:	2310      	movs	r3, #16
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800056c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000572:	2304      	movs	r3, #4
 8000574:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000576:	2307      	movs	r3, #7
 8000578:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	4618      	mov	r0, r3
 8000580:	f000 ffa6 	bl	80014d0 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058a:	f000 f929 	bl	80007e0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2102      	movs	r1, #2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fa08 	bl	80019c0 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005b6:	f000 f913 	bl	80007e0 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3750      	adds	r7, #80	; 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_ADC1_Init+0x98>)
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <MX_ADC1_Init+0x9c>)
 80005e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_ADC1_Init+0x98>)
 80005e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_ADC1_Init+0x98>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_ADC1_Init+0x98>)
 800060e:	4a17      	ldr	r2, [pc, #92]	; (800066c <MX_ADC1_Init+0xa0>)
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_ADC1_Init+0x98>)
 800061a:	2201      	movs	r2, #1
 800061c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_ADC1_Init+0x98>)
 8000628:	2201      	movs	r2, #1
 800062a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <MX_ADC1_Init+0x98>)
 800062e:	f000 fa69 	bl	8000b04 <HAL_ADC_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000638:	f000 f8d2 	bl	80007e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800063c:	230a      	movs	r3, #10
 800063e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000640:	2301      	movs	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_ADC1_Init+0x98>)
 800064e:	f000 fa9d 	bl	8000b8c <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000658:	f000 f8c2 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000028 	.word	0x20000028
 8000668:	40012000 	.word	0x40012000
 800066c:	0f000001 	.word	0x0f000001

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_USART2_UART_Init+0x50>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a8:	f001 fbaa 	bl	8001e00 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006b2:	f000 f895 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000070 	.word	0x20000070
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <MX_GPIO_Init+0x10c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a3b      	ldr	r2, [pc, #236]	; (80007d0 <MX_GPIO_Init+0x10c>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <MX_GPIO_Init+0x10c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <MX_GPIO_Init+0x10c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a34      	ldr	r2, [pc, #208]	; (80007d0 <MX_GPIO_Init+0x10c>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <MX_GPIO_Init+0x10c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <MX_GPIO_Init+0x10c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a2d      	ldr	r2, [pc, #180]	; (80007d0 <MX_GPIO_Init+0x10c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <MX_GPIO_Init+0x10c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <MX_GPIO_Init+0x10c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a26      	ldr	r2, [pc, #152]	; (80007d0 <MX_GPIO_Init+0x10c>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <MX_GPIO_Init+0x10c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_7, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8000750:	4820      	ldr	r0, [pc, #128]	; (80007d4 <MX_GPIO_Init+0x110>)
 8000752:	f000 fea3 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8000756:	2200      	movs	r2, #0
 8000758:	f242 21e0 	movw	r1, #8928	; 0x22e0
 800075c:	481e      	ldr	r0, [pc, #120]	; (80007d8 <MX_GPIO_Init+0x114>)
 800075e:	f000 fe9d 	bl	800149c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_6, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000768:	481c      	ldr	r0, [pc, #112]	; (80007dc <MX_GPIO_Init+0x118>)
 800076a:	f000 fe97 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 800076e:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4813      	ldr	r0, [pc, #76]	; (80007d4 <MX_GPIO_Init+0x110>)
 8000788:	f000 fd04 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA9
                           PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800078c:	f242 23e0 	movw	r3, #8928	; 0x22e0
 8000790:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_GPIO_Init+0x114>)
 80007a6:	f000 fcf5 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 80007aa:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_GPIO_Init+0x118>)
 80007c4:	f000 fce6 	bl	8001194 <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020800 	.word	0x40020800
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40020400 	.word	0x40020400

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800082a:	2007      	movs	r0, #7
 800082c:	f000 fc7e 	bl	800112c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_ADC_MspInit+0x7c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d127      	bne.n	80008ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_ADC_MspInit+0x80>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <HAL_ADC_MspInit+0x80>)
 8000868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_ADC_MspInit+0x80>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_ADC_MspInit+0x80>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_ADC_MspInit+0x80>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_ADC_MspInit+0x80>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000896:	2301      	movs	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089a:	2303      	movs	r3, #3
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_ADC_MspInit+0x84>)
 80008aa:	f000 fc73 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40012000 	.word	0x40012000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12b      	bne.n	800093e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_UART_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_UART_MspInit+0x88>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091e:	230c      	movs	r3, #12
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092e:	2307      	movs	r3, #7
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_UART_MspInit+0x8c>)
 800093a:	f000 fc2b 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40004400 	.word	0x40004400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f890 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f6:	f7ff ffd7 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f001 fcc3 	bl	8002384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fd6b 	bl	80004d8 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a10:	0800241c 	.word	0x0800241c
  ldr r2, =_sbss
 8000a14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a18:	200000b8 	.word	0x200000b8

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 fb6f 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff feca 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fb79 	bl	800117a <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa0:	f000 fb4f 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200000b4 	.word	0x200000b4

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000b4 	.word	0x200000b4

08000b04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e033      	b.n	8000b82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d109      	bne.n	8000b36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fe8a 	bl	800083c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d118      	bne.n	8000b74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b4a:	f023 0302 	bic.w	r3, r3, #2
 8000b4e:	f043 0202 	orr.w	r2, r3, #2
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f93a 	bl	8000dd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f023 0303 	bic.w	r3, r3, #3
 8000b6a:	f043 0201 	orr.w	r2, r3, #1
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	641a      	str	r2, [r3, #64]	; 0x40
 8000b72:	e001      	b.n	8000b78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <HAL_ADC_ConfigChannel+0x1c>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e105      	b.n	8000db4 <HAL_ADC_ConfigChannel+0x228>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	d925      	bls.n	8000c04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68d9      	ldr	r1, [r3, #12]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	3b1e      	subs	r3, #30
 8000bce:	2207      	movs	r2, #7
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43da      	mvns	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	400a      	ands	r2, r1
 8000bdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68d9      	ldr	r1, [r3, #12]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4403      	add	r3, r0
 8000bf6:	3b1e      	subs	r3, #30
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	e022      	b.n	8000c4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6919      	ldr	r1, [r3, #16]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	2207      	movs	r2, #7
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	400a      	ands	r2, r1
 8000c26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6919      	ldr	r1, [r3, #16]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4403      	add	r3, r0
 8000c40:	409a      	lsls	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d824      	bhi.n	8000c9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	3b05      	subs	r3, #5
 8000c64:	221f      	movs	r2, #31
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	400a      	ands	r2, r1
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3b05      	subs	r3, #5
 8000c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
 8000c9a:	e04c      	b.n	8000d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b0c      	cmp	r3, #12
 8000ca2:	d824      	bhi.n	8000cee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	3b23      	subs	r3, #35	; 0x23
 8000cb6:	221f      	movs	r2, #31
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43da      	mvns	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b23      	subs	r3, #35	; 0x23
 8000ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	631a      	str	r2, [r3, #48]	; 0x30
 8000cec:	e023      	b.n	8000d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3b41      	subs	r3, #65	; 0x41
 8000d00:	221f      	movs	r2, #31
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	3b41      	subs	r3, #65	; 0x41
 8000d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_ADC_ConfigChannel+0x234>)
 8000d38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <HAL_ADC_ConfigChannel+0x238>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d109      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0x1cc>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b12      	cmp	r3, #18
 8000d4a:	d105      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_ADC_ConfigChannel+0x238>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d123      	bne.n	8000daa <HAL_ADC_ConfigChannel+0x21e>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b10      	cmp	r3, #16
 8000d68:	d003      	beq.n	8000d72 <HAL_ADC_ConfigChannel+0x1e6>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b11      	cmp	r3, #17
 8000d70:	d11b      	bne.n	8000daa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b10      	cmp	r3, #16
 8000d84:	d111      	bne.n	8000daa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_ADC_ConfigChannel+0x23c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_ADC_ConfigChannel+0x240>)
 8000d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d90:	0c9a      	lsrs	r2, r3, #18
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d9c:	e002      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f9      	bne.n	8000d9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	40012300 	.word	0x40012300
 8000dc4:	40012000 	.word	0x40012000
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	431bde83 	.word	0x431bde83

08000dd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dd8:	4b79      	ldr	r3, [pc, #484]	; (8000fc0 <ADC_Init+0x1f0>)
 8000dda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	431a      	orrs	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6859      	ldr	r1, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	021a      	lsls	r2, r3, #8
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6859      	ldr	r1, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6899      	ldr	r1, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	4a58      	ldr	r2, [pc, #352]	; (8000fc4 <ADC_Init+0x1f4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d022      	beq.n	8000eae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6899      	ldr	r1, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6899      	ldr	r1, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	e00f      	b.n	8000ece <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ecc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0202 	bic.w	r2, r2, #2
 8000edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6899      	ldr	r1, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7e1b      	ldrb	r3, [r3, #24]
 8000ee8:	005a      	lsls	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d01b      	beq.n	8000f34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6859      	ldr	r1, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	3b01      	subs	r3, #1
 8000f28:	035a      	lsls	r2, r3, #13
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	e007      	b.n	8000f44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	051a      	lsls	r2, r3, #20
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6899      	ldr	r1, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f86:	025a      	lsls	r2, r3, #9
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6899      	ldr	r1, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	029a      	lsls	r2, r3, #10
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	609a      	str	r2, [r3, #8]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40012300 	.word	0x40012300
 8000fc4:	0f000001 	.word	0x0f000001

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff47 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff5c 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffb0 	bl	80010e8 <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e159      	b.n	8001464 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 8148 	bne.w	800145e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d017      	beq.n	8001284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a2 	beq.w	800145e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b57      	ldr	r3, [pc, #348]	; (800147c <HAL_GPIO_Init+0x2e8>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a56      	ldr	r2, [pc, #344]	; (800147c <HAL_GPIO_Init+0x2e8>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b54      	ldr	r3, [pc, #336]	; (800147c <HAL_GPIO_Init+0x2e8>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_GPIO_Init+0x2ec>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a49      	ldr	r2, [pc, #292]	; (8001484 <HAL_GPIO_Init+0x2f0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d019      	beq.n	8001396 <HAL_GPIO_Init+0x202>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a48      	ldr	r2, [pc, #288]	; (8001488 <HAL_GPIO_Init+0x2f4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x1fe>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a47      	ldr	r2, [pc, #284]	; (800148c <HAL_GPIO_Init+0x2f8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x1fa>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a46      	ldr	r2, [pc, #280]	; (8001490 <HAL_GPIO_Init+0x2fc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x1f6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a45      	ldr	r2, [pc, #276]	; (8001494 <HAL_GPIO_Init+0x300>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x1f2>
 8001382:	2304      	movs	r3, #4
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001386:	2307      	movs	r3, #7
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x204>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x204>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	; (8001480 <HAL_GPIO_Init+0x2ec>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_GPIO_Init+0x304>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <HAL_GPIO_Init+0x304>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <HAL_GPIO_Init+0x304>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a24      	ldr	r2, [pc, #144]	; (8001498 <HAL_GPIO_Init+0x304>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <HAL_GPIO_Init+0x304>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a1a      	ldr	r2, [pc, #104]	; (8001498 <HAL_GPIO_Init+0x304>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_GPIO_Init+0x304>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001458:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_GPIO_Init+0x304>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f aea2 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40013c00 	.word	0x40013c00

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b8:	e003      	b.n	80014c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	041a      	lsls	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e267      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d075      	beq.n	80015da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ee:	4b88      	ldr	r3, [pc, #544]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d00c      	beq.n	8001514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fa:	4b85      	ldr	r3, [pc, #532]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001502:	2b08      	cmp	r3, #8
 8001504:	d112      	bne.n	800152c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001506:	4b82      	ldr	r3, [pc, #520]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001512:	d10b      	bne.n	800152c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d05b      	beq.n	80015d8 <HAL_RCC_OscConfig+0x108>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d157      	bne.n	80015d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e242      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001534:	d106      	bne.n	8001544 <HAL_RCC_OscConfig+0x74>
 8001536:	4b76      	ldr	r3, [pc, #472]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a75      	ldr	r2, [pc, #468]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xb0>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x98>
 800154e:	4b70      	ldr	r3, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6f      	ldr	r2, [pc, #444]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b6d      	ldr	r3, [pc, #436]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6c      	ldr	r2, [pc, #432]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xb0>
 8001568:	4b69      	ldr	r3, [pc, #420]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a68      	ldr	r2, [pc, #416]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b66      	ldr	r3, [pc, #408]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a65      	ldr	r2, [pc, #404]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fab0 	bl	8000aec <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff faac 	bl	8000aec <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e207      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xc0>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fa9c 	bl	8000aec <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fa98 	bl	8000aec <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1f3      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	4b51      	ldr	r3, [pc, #324]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0xe8>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d063      	beq.n	80016ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e6:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d11c      	bne.n	8001638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d116      	bne.n	8001638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x152>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e1c7      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4937      	ldr	r1, [pc, #220]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	e03a      	b.n	80016ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001640:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_RCC_OscConfig+0x244>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff fa51 	bl	8000aec <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fa4d 	bl	8000aec <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1a8      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4925      	ldr	r1, [pc, #148]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_RCC_OscConfig+0x244>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fa30 	bl	8000aec <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fa2c 	bl	8000aec <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e187      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d036      	beq.n	8001728 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d016      	beq.n	80016f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_RCC_OscConfig+0x248>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa10 	bl	8000aec <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fa0c 	bl	8000aec <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e167      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_OscConfig+0x240>)
 80016e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x200>
 80016ee:	e01b      	b.n	8001728 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_RCC_OscConfig+0x248>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff f9f9 	bl	8000aec <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fc:	e00e      	b.n	800171c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fe:	f7ff f9f5 	bl	8000aec <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d907      	bls.n	800171c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e150      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
 8001710:	40023800 	.word	0x40023800
 8001714:	42470000 	.word	0x42470000
 8001718:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	4b88      	ldr	r3, [pc, #544]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ea      	bne.n	80016fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 8097 	beq.w	8001864 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173a:	4b81      	ldr	r3, [pc, #516]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b7d      	ldr	r3, [pc, #500]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a7c      	ldr	r2, [pc, #496]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b7a      	ldr	r3, [pc, #488]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001762:	2301      	movs	r3, #1
 8001764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	4b77      	ldr	r3, [pc, #476]	; (8001944 <HAL_RCC_OscConfig+0x474>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001772:	4b74      	ldr	r3, [pc, #464]	; (8001944 <HAL_RCC_OscConfig+0x474>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a73      	ldr	r2, [pc, #460]	; (8001944 <HAL_RCC_OscConfig+0x474>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff f9b5 	bl	8000aec <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff f9b1 	bl	8000aec <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e10c      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x474>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x2ea>
 80017ac:	4b64      	ldr	r3, [pc, #400]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	4a63      	ldr	r2, [pc, #396]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	; 0x70
 80017b8:	e01c      	b.n	80017f4 <HAL_RCC_OscConfig+0x324>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x30c>
 80017c2:	4b5f      	ldr	r3, [pc, #380]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	4a5e      	ldr	r2, [pc, #376]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6713      	str	r3, [r2, #112]	; 0x70
 80017ce:	4b5c      	ldr	r3, [pc, #368]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	4a5b      	ldr	r2, [pc, #364]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6713      	str	r3, [r2, #112]	; 0x70
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0x324>
 80017dc:	4b58      	ldr	r3, [pc, #352]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e0:	4a57      	ldr	r2, [pc, #348]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6713      	str	r3, [r2, #112]	; 0x70
 80017e8:	4b55      	ldr	r3, [pc, #340]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	4a54      	ldr	r2, [pc, #336]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d015      	beq.n	8001828 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff f976 	bl	8000aec <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001802:	e00a      	b.n	800181a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff f972 	bl	8000aec <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0cb      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181a:	4b49      	ldr	r3, [pc, #292]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0ee      	beq.n	8001804 <HAL_RCC_OscConfig+0x334>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff f960 	bl	8000aec <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff f95c 	bl	8000aec <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e0b5      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001846:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ee      	bne.n	8001830 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b39      	ldr	r3, [pc, #228]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a38      	ldr	r2, [pc, #224]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 800185e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80a1 	beq.w	80019b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b08      	cmp	r3, #8
 8001878:	d05c      	beq.n	8001934 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d141      	bne.n	8001906 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_RCC_OscConfig+0x478>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff f930 	bl	8000aec <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f92c 	bl	8000aec <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e087      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	019b      	lsls	r3, r3, #6
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	061b      	lsls	r3, r3, #24
 80018d2:	491b      	ldr	r1, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x478>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff f905 	bl	8000aec <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff f901 	bl	8000aec <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e05c      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x416>
 8001904:	e054      	b.n	80019b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_RCC_OscConfig+0x478>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff f8ee 	bl	8000aec <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f8ea 	bl	8000aec <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e045      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_RCC_OscConfig+0x470>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x444>
 8001932:	e03d      	b.n	80019b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e038      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
 8001940:	40023800 	.word	0x40023800
 8001944:	40007000 	.word	0x40007000
 8001948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x4ec>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d028      	beq.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d121      	bne.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d11a      	bne.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001984:	4293      	cmp	r3, r2
 8001986:	d111      	bne.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	3b01      	subs	r3, #1
 8001996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d107      	bne.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0cc      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d90c      	bls.n	80019fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0b8      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a58      	ldr	r2, [pc, #352]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a2c:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a38:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	494d      	ldr	r1, [pc, #308]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d044      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d119      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e07f      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7e:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06f      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e067      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9e:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 0203 	bic.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4934      	ldr	r1, [pc, #208]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f81c 	bl	8000aec <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7ff f818 	bl	8000aec <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e04f      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1eb      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d20c      	bcs.n	8001b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e032      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4916      	ldr	r1, [pc, #88]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d009      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	490e      	ldr	r1, [pc, #56]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b46:	f000 f821 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	490a      	ldr	r1, [pc, #40]	; (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	5ccb      	ldrb	r3, [r1, r3]
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe ff7c 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023c00 	.word	0x40023c00
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	080023f4 	.word	0x080023f4
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b90:	b094      	sub	sp, #80	; 0x50
 8001b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	647b      	str	r3, [r7, #68]	; 0x44
 8001b98:	2300      	movs	r3, #0
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba4:	4b79      	ldr	r3, [pc, #484]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d00d      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x40>
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	f200 80e1 	bhi.w	8001d78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bbe:	e0db      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bc2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bc4:	e0db      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc6:	4b73      	ldr	r3, [pc, #460]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bca:	e0d8      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d063      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be2:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	099b      	lsrs	r3, r3, #6
 8001be8:	2200      	movs	r2, #0
 8001bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bfe:	4622      	mov	r2, r4
 8001c00:	462b      	mov	r3, r5
 8001c02:	f04f 0000 	mov.w	r0, #0
 8001c06:	f04f 0100 	mov.w	r1, #0
 8001c0a:	0159      	lsls	r1, r3, #5
 8001c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c10:	0150      	lsls	r0, r2, #5
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4621      	mov	r1, r4
 8001c18:	1a51      	subs	r1, r2, r1
 8001c1a:	6139      	str	r1, [r7, #16]
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c30:	4659      	mov	r1, fp
 8001c32:	018b      	lsls	r3, r1, #6
 8001c34:	4651      	mov	r1, sl
 8001c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c3a:	4651      	mov	r1, sl
 8001c3c:	018a      	lsls	r2, r1, #6
 8001c3e:	4651      	mov	r1, sl
 8001c40:	ebb2 0801 	subs.w	r8, r2, r1
 8001c44:	4659      	mov	r1, fp
 8001c46:	eb63 0901 	sbc.w	r9, r3, r1
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c5e:	4690      	mov	r8, r2
 8001c60:	4699      	mov	r9, r3
 8001c62:	4623      	mov	r3, r4
 8001c64:	eb18 0303 	adds.w	r3, r8, r3
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	462b      	mov	r3, r5
 8001c6c:	eb49 0303 	adc.w	r3, r9, r3
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c7e:	4629      	mov	r1, r5
 8001c80:	024b      	lsls	r3, r1, #9
 8001c82:	4621      	mov	r1, r4
 8001c84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c88:	4621      	mov	r1, r4
 8001c8a:	024a      	lsls	r2, r1, #9
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c92:	2200      	movs	r2, #0
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c9c:	f7fe fa9a 	bl	80001d4 <__aeabi_uldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ca8:	e058      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	099b      	lsrs	r3, r3, #6
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cc4:	4642      	mov	r2, r8
 8001cc6:	464b      	mov	r3, r9
 8001cc8:	f04f 0000 	mov.w	r0, #0
 8001ccc:	f04f 0100 	mov.w	r1, #0
 8001cd0:	0159      	lsls	r1, r3, #5
 8001cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd6:	0150      	lsls	r0, r2, #5
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4641      	mov	r1, r8
 8001cde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cfc:	ebb2 040a 	subs.w	r4, r2, sl
 8001d00:	eb63 050b 	sbc.w	r5, r3, fp
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	00eb      	lsls	r3, r5, #3
 8001d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d12:	00e2      	lsls	r2, r4, #3
 8001d14:	4614      	mov	r4, r2
 8001d16:	461d      	mov	r5, r3
 8001d18:	4643      	mov	r3, r8
 8001d1a:	18e3      	adds	r3, r4, r3
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	464b      	mov	r3, r9
 8001d20:	eb45 0303 	adc.w	r3, r5, r3
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d32:	4629      	mov	r1, r5
 8001d34:	028b      	lsls	r3, r1, #10
 8001d36:	4621      	mov	r1, r4
 8001d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	028a      	lsls	r2, r1, #10
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d46:	2200      	movs	r2, #0
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	61fa      	str	r2, [r7, #28]
 8001d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d50:	f7fe fa40 	bl	80001d4 <__aeabi_uldivmod>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4613      	mov	r3, r2
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	3301      	adds	r3, #1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d76:	e002      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3750      	adds	r7, #80	; 0x50
 8001d84:	46bd      	mov	sp, r7
 8001d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	00f42400 	.word	0x00f42400
 8001d94:	007a1200 	.word	0x007a1200

08001d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001db4:	f7ff fff0 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0a9b      	lsrs	r3, r3, #10
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4903      	ldr	r1, [pc, #12]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08002404 	.word	0x08002404

08001dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ddc:	f7ff ffdc 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0b5b      	lsrs	r3, r3, #13
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4903      	ldr	r1, [pc, #12]	; (8001dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08002404 	.word	0x08002404

08001e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e03f      	b.n	8001e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe fd4c 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2224      	movs	r2, #36	; 0x24
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f829 	bl	8001e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea0:	b0c0      	sub	sp, #256	; 0x100
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb8:	68d9      	ldr	r1, [r3, #12]
 8001eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	ea40 0301 	orr.w	r3, r0, r1
 8001ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ef4:	f021 010c 	bic.w	r1, r1, #12
 8001ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f02:	430b      	orrs	r3, r1
 8001f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f16:	6999      	ldr	r1, [r3, #24]
 8001f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	ea40 0301 	orr.w	r3, r0, r1
 8001f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b8f      	ldr	r3, [pc, #572]	; (8002168 <UART_SetConfig+0x2cc>)
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d005      	beq.n	8001f3c <UART_SetConfig+0xa0>
 8001f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b8d      	ldr	r3, [pc, #564]	; (800216c <UART_SetConfig+0x2d0>)
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d104      	bne.n	8001f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f3c:	f7ff ff4c 	bl	8001dd8 <HAL_RCC_GetPCLK2Freq>
 8001f40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f44:	e003      	b.n	8001f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f46:	f7ff ff33 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 8001f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f58:	f040 810c 	bne.w	8002174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f60:	2200      	movs	r2, #0
 8001f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f6e:	4622      	mov	r2, r4
 8001f70:	462b      	mov	r3, r5
 8001f72:	1891      	adds	r1, r2, r2
 8001f74:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f76:	415b      	adcs	r3, r3
 8001f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f7e:	4621      	mov	r1, r4
 8001f80:	eb12 0801 	adds.w	r8, r2, r1
 8001f84:	4629      	mov	r1, r5
 8001f86:	eb43 0901 	adc.w	r9, r3, r1
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	eb18 0303 	adds.w	r3, r8, r3
 8001fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fac:	462b      	mov	r3, r5
 8001fae:	eb49 0303 	adc.w	r3, r9, r3
 8001fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001fca:	460b      	mov	r3, r1
 8001fcc:	18db      	adds	r3, r3, r3
 8001fce:	653b      	str	r3, [r7, #80]	; 0x50
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	eb42 0303 	adc.w	r3, r2, r3
 8001fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8001fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fe0:	f7fe f8f8 	bl	80001d4 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4b61      	ldr	r3, [pc, #388]	; (8002170 <UART_SetConfig+0x2d4>)
 8001fea:	fba3 2302 	umull	r2, r3, r3, r2
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	011c      	lsls	r4, r3, #4
 8001ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002004:	4642      	mov	r2, r8
 8002006:	464b      	mov	r3, r9
 8002008:	1891      	adds	r1, r2, r2
 800200a:	64b9      	str	r1, [r7, #72]	; 0x48
 800200c:	415b      	adcs	r3, r3
 800200e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002014:	4641      	mov	r1, r8
 8002016:	eb12 0a01 	adds.w	sl, r2, r1
 800201a:	4649      	mov	r1, r9
 800201c:	eb43 0b01 	adc.w	fp, r3, r1
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800202c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002034:	4692      	mov	sl, r2
 8002036:	469b      	mov	fp, r3
 8002038:	4643      	mov	r3, r8
 800203a:	eb1a 0303 	adds.w	r3, sl, r3
 800203e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002042:	464b      	mov	r3, r9
 8002044:	eb4b 0303 	adc.w	r3, fp, r3
 8002048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002058:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800205c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002060:	460b      	mov	r3, r1
 8002062:	18db      	adds	r3, r3, r3
 8002064:	643b      	str	r3, [r7, #64]	; 0x40
 8002066:	4613      	mov	r3, r2
 8002068:	eb42 0303 	adc.w	r3, r2, r3
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
 800206e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002076:	f7fe f8ad 	bl	80001d4 <__aeabi_uldivmod>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4611      	mov	r1, r2
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <UART_SetConfig+0x2d4>)
 8002082:	fba3 2301 	umull	r2, r3, r3, r1
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2264      	movs	r2, #100	; 0x64
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	1acb      	subs	r3, r1, r3
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <UART_SetConfig+0x2d4>)
 8002098:	fba3 2302 	umull	r2, r3, r3, r2
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020a4:	441c      	add	r4, r3
 80020a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020b8:	4642      	mov	r2, r8
 80020ba:	464b      	mov	r3, r9
 80020bc:	1891      	adds	r1, r2, r2
 80020be:	63b9      	str	r1, [r7, #56]	; 0x38
 80020c0:	415b      	adcs	r3, r3
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020c8:	4641      	mov	r1, r8
 80020ca:	1851      	adds	r1, r2, r1
 80020cc:	6339      	str	r1, [r7, #48]	; 0x30
 80020ce:	4649      	mov	r1, r9
 80020d0:	414b      	adcs	r3, r1
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020e0:	4659      	mov	r1, fp
 80020e2:	00cb      	lsls	r3, r1, #3
 80020e4:	4651      	mov	r1, sl
 80020e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ea:	4651      	mov	r1, sl
 80020ec:	00ca      	lsls	r2, r1, #3
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	4642      	mov	r2, r8
 80020f6:	189b      	adds	r3, r3, r2
 80020f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020fc:	464b      	mov	r3, r9
 80020fe:	460a      	mov	r2, r1
 8002100:	eb42 0303 	adc.w	r3, r2, r3
 8002104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002114:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800211c:	460b      	mov	r3, r1
 800211e:	18db      	adds	r3, r3, r3
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	4613      	mov	r3, r2
 8002124:	eb42 0303 	adc.w	r3, r2, r3
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800212a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800212e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002132:	f7fe f84f 	bl	80001d4 <__aeabi_uldivmod>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <UART_SetConfig+0x2d4>)
 800213c:	fba3 1302 	umull	r1, r3, r3, r2
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	2164      	movs	r1, #100	; 0x64
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	3332      	adds	r3, #50	; 0x32
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <UART_SetConfig+0x2d4>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	f003 0207 	and.w	r2, r3, #7
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4422      	add	r2, r4
 8002162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002164:	e105      	b.n	8002372 <UART_SetConfig+0x4d6>
 8002166:	bf00      	nop
 8002168:	40011000 	.word	0x40011000
 800216c:	40011400 	.word	0x40011400
 8002170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002178:	2200      	movs	r2, #0
 800217a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800217e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002186:	4642      	mov	r2, r8
 8002188:	464b      	mov	r3, r9
 800218a:	1891      	adds	r1, r2, r2
 800218c:	6239      	str	r1, [r7, #32]
 800218e:	415b      	adcs	r3, r3
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002196:	4641      	mov	r1, r8
 8002198:	1854      	adds	r4, r2, r1
 800219a:	4649      	mov	r1, r9
 800219c:	eb43 0501 	adc.w	r5, r3, r1
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	00eb      	lsls	r3, r5, #3
 80021aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ae:	00e2      	lsls	r2, r4, #3
 80021b0:	4614      	mov	r4, r2
 80021b2:	461d      	mov	r5, r3
 80021b4:	4643      	mov	r3, r8
 80021b6:	18e3      	adds	r3, r4, r3
 80021b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021bc:	464b      	mov	r3, r9
 80021be:	eb45 0303 	adc.w	r3, r5, r3
 80021c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021e2:	4629      	mov	r1, r5
 80021e4:	008b      	lsls	r3, r1, #2
 80021e6:	4621      	mov	r1, r4
 80021e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021ec:	4621      	mov	r1, r4
 80021ee:	008a      	lsls	r2, r1, #2
 80021f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021f4:	f7fd ffee 	bl	80001d4 <__aeabi_uldivmod>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4b60      	ldr	r3, [pc, #384]	; (8002380 <UART_SetConfig+0x4e4>)
 80021fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	011c      	lsls	r4, r3, #4
 8002206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800220a:	2200      	movs	r2, #0
 800220c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002210:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002218:	4642      	mov	r2, r8
 800221a:	464b      	mov	r3, r9
 800221c:	1891      	adds	r1, r2, r2
 800221e:	61b9      	str	r1, [r7, #24]
 8002220:	415b      	adcs	r3, r3
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002228:	4641      	mov	r1, r8
 800222a:	1851      	adds	r1, r2, r1
 800222c:	6139      	str	r1, [r7, #16]
 800222e:	4649      	mov	r1, r9
 8002230:	414b      	adcs	r3, r1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002240:	4659      	mov	r1, fp
 8002242:	00cb      	lsls	r3, r1, #3
 8002244:	4651      	mov	r1, sl
 8002246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800224a:	4651      	mov	r1, sl
 800224c:	00ca      	lsls	r2, r1, #3
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	4603      	mov	r3, r0
 8002254:	4642      	mov	r2, r8
 8002256:	189b      	adds	r3, r3, r2
 8002258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800225c:	464b      	mov	r3, r9
 800225e:	460a      	mov	r2, r1
 8002260:	eb42 0303 	adc.w	r3, r2, r3
 8002264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	67bb      	str	r3, [r7, #120]	; 0x78
 8002272:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002280:	4649      	mov	r1, r9
 8002282:	008b      	lsls	r3, r1, #2
 8002284:	4641      	mov	r1, r8
 8002286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800228a:	4641      	mov	r1, r8
 800228c:	008a      	lsls	r2, r1, #2
 800228e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002292:	f7fd ff9f 	bl	80001d4 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <UART_SetConfig+0x4e4>)
 800229c:	fba3 1302 	umull	r1, r3, r3, r2
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	2164      	movs	r1, #100	; 0x64
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	3332      	adds	r3, #50	; 0x32
 80022ae:	4a34      	ldr	r2, [pc, #208]	; (8002380 <UART_SetConfig+0x4e4>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ba:	441c      	add	r4, r3
 80022bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c0:	2200      	movs	r2, #0
 80022c2:	673b      	str	r3, [r7, #112]	; 0x70
 80022c4:	677a      	str	r2, [r7, #116]	; 0x74
 80022c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022ca:	4642      	mov	r2, r8
 80022cc:	464b      	mov	r3, r9
 80022ce:	1891      	adds	r1, r2, r2
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	415b      	adcs	r3, r3
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022da:	4641      	mov	r1, r8
 80022dc:	1851      	adds	r1, r2, r1
 80022de:	6039      	str	r1, [r7, #0]
 80022e0:	4649      	mov	r1, r9
 80022e2:	414b      	adcs	r3, r1
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022f2:	4659      	mov	r1, fp
 80022f4:	00cb      	lsls	r3, r1, #3
 80022f6:	4651      	mov	r1, sl
 80022f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fc:	4651      	mov	r1, sl
 80022fe:	00ca      	lsls	r2, r1, #3
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	4603      	mov	r3, r0
 8002306:	4642      	mov	r2, r8
 8002308:	189b      	adds	r3, r3, r2
 800230a:	66bb      	str	r3, [r7, #104]	; 0x68
 800230c:	464b      	mov	r3, r9
 800230e:	460a      	mov	r2, r1
 8002310:	eb42 0303 	adc.w	r3, r2, r3
 8002314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	663b      	str	r3, [r7, #96]	; 0x60
 8002320:	667a      	str	r2, [r7, #100]	; 0x64
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800232e:	4649      	mov	r1, r9
 8002330:	008b      	lsls	r3, r1, #2
 8002332:	4641      	mov	r1, r8
 8002334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002338:	4641      	mov	r1, r8
 800233a:	008a      	lsls	r2, r1, #2
 800233c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002340:	f7fd ff48 	bl	80001d4 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <UART_SetConfig+0x4e4>)
 800234a:	fba3 1302 	umull	r1, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2164      	movs	r1, #100	; 0x64
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	3332      	adds	r3, #50	; 0x32
 800235c:	4a08      	ldr	r2, [pc, #32]	; (8002380 <UART_SetConfig+0x4e4>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	f003 020f 	and.w	r2, r3, #15
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4422      	add	r2, r4
 8002370:	609a      	str	r2, [r3, #8]
}
 8002372:	bf00      	nop
 8002374:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002378:	46bd      	mov	sp, r7
 800237a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237e:	bf00      	nop
 8002380:	51eb851f 	.word	0x51eb851f

08002384 <__libc_init_array>:
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	4d0d      	ldr	r5, [pc, #52]	; (80023bc <__libc_init_array+0x38>)
 8002388:	4c0d      	ldr	r4, [pc, #52]	; (80023c0 <__libc_init_array+0x3c>)
 800238a:	1b64      	subs	r4, r4, r5
 800238c:	10a4      	asrs	r4, r4, #2
 800238e:	2600      	movs	r6, #0
 8002390:	42a6      	cmp	r6, r4
 8002392:	d109      	bne.n	80023a8 <__libc_init_array+0x24>
 8002394:	4d0b      	ldr	r5, [pc, #44]	; (80023c4 <__libc_init_array+0x40>)
 8002396:	4c0c      	ldr	r4, [pc, #48]	; (80023c8 <__libc_init_array+0x44>)
 8002398:	f000 f820 	bl	80023dc <_init>
 800239c:	1b64      	subs	r4, r4, r5
 800239e:	10a4      	asrs	r4, r4, #2
 80023a0:	2600      	movs	r6, #0
 80023a2:	42a6      	cmp	r6, r4
 80023a4:	d105      	bne.n	80023b2 <__libc_init_array+0x2e>
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
 80023a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ac:	4798      	blx	r3
 80023ae:	3601      	adds	r6, #1
 80023b0:	e7ee      	b.n	8002390 <__libc_init_array+0xc>
 80023b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b6:	4798      	blx	r3
 80023b8:	3601      	adds	r6, #1
 80023ba:	e7f2      	b.n	80023a2 <__libc_init_array+0x1e>
 80023bc:	08002414 	.word	0x08002414
 80023c0:	08002414 	.word	0x08002414
 80023c4:	08002414 	.word	0x08002414
 80023c8:	08002418 	.word	0x08002418

080023cc <memset>:
 80023cc:	4402      	add	r2, r0
 80023ce:	4603      	mov	r3, r0
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d100      	bne.n	80023d6 <memset+0xa>
 80023d4:	4770      	bx	lr
 80023d6:	f803 1b01 	strb.w	r1, [r3], #1
 80023da:	e7f9      	b.n	80023d0 <memset+0x4>

080023dc <_init>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	bf00      	nop
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr

080023e8 <_fini>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	bf00      	nop
 80023ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ee:	bc08      	pop	{r3}
 80023f0:	469e      	mov	lr, r3
 80023f2:	4770      	bx	lr
